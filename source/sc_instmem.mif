DEPTH = 64;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
  0 : 3c010050; % (000) main:   lui $1, data                      # address of data[0] %
  1 : 20050004; % (004)         addi $5, $0, (data_end - data)/4  # counter %
  2 : 0c00001b; % (008) call:   jal sum                           # call function %
  3 : 00000000; % (00c)  %
  4 : ac820000; % (010)         sw $2, 0($4)                      # store result %
  5 : 8c890000; % (014)         lw $9, 0($4)                      # check sw %
  6 : 01244022; % (018)         sub $8, $9, $4                    # sub: $8 <- $9 - $4 %
  7 : 20050003; % (01c)         addi $5, $0, 3                    # counter %
  8 : 20a5ffff; % (020) loop2:  addi $5, $5, -1                   # counter - 1 %
  9 : 34a8ffff; % (024)         ori $8, $5, 0xffff                # zero-extend: 0000ffff %
  A : 39085555; % (028)         xori $8, $8, 0x5555               # zero-extend: 0000aaaa %
  B : 2009ffff; % (02c)         addi $9, $0, -1                   # sign-extend: ffffffff %
  C : 312affff; % (030)         andi $10, $9, 0xffff              # zero-extend: 0000ffff %
  D : 01493025; % (034)         or $6, $10, $9                    # or: ffffffff %
  E : 01494026; % (038)         xor $8, $10, $9                   # xor: ffff0000 %
  F : 01463824; % (03c)         and $7, $10, $6                   # and: 0000ffff %
 10 : 10a00003; % (040)         beq $5, $0, shift                 # if $5 = 0, goto shift %
 11 : 00000000; % (044)  %
 12 : 08000008; % (048)         j loop2                           # jump loop2 %
 13 : 00000000; % (04c)  %
 14 : 2005ffff; % (050) shift:  addi $5, $0, -1                   # $5 = ffffffff %
 15 : 000543c0; % (054)         sll $8, $5, 15                    # <<15 = ffff8000 %
 16 : 00084400; % (058)         sll $8, $8, 16                    # <<16 = 80000000 %
 17 : 00084403; % (05c)         sra $8, $8, 16                    # >>16 = ffff8000 (arith) %
 18 : 000843c2; % (060)         srl $8, $8, 15                    # >>15 = 0001ffff (logic) %
 19 : 08000019; % (064) finish: j finish                          # dead loop %
 1A : 00000000; % (068)  %
 1B : 00004020; % (06c) sum:    add $8, $0, $0                    # sum %
 1C : 8c890000; % (070) loop:   lw $9, 0($4)                      # load data %
 1D : 20840004; % (074)         addi $4, $4, 4                    # address + 4 %
 1E : 01094020; % (078)         add $8, $8, $9                    # sum %
 1F : 20a5ffff; % (07c)         addi $5, $5, -1                   # counter - 1 %
 20 : 14a0fffb; % (080)         bne $5, $0, loop                  # finish? %
 21 : 00000000; % (084)  %
 22 : 00081000; % (088)         sll $2, $8, 0                     # move result to $v0 %
 23 : 03e00008; % (08c)         jr $ra                            # return %
 24 : 00000000; % (090)  %
END;
