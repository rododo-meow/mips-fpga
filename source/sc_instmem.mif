DEPTH = 64;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
  0 : 34040050; % (000) main:   ori $4, $0, data                  # address of data[0] %
  1 : 20050004; % (004)         addi $5, $0, (data_end - data)/4  # counter %
  2 : 0c000027; % (008) call:   jal sum                           # call function %
  3 : 00000000; % (00c)  %
  4 : ac820000; % (010)         sw $2, 0($4)                      # store result %
  5 : 3c01f000; % (014)         lui $1, 0xf000 %
  6 : 3043000f; % (018)         andi $3, $2, 0xf %
  7 : ac230000; % (01c)         sw $3, 0($1) %
  8 : 00021902; % (020)         srl $3, $2, 4 %
  9 : 3063000f; % (024)         andi $3, $3, 0xf %
  A : ac230004; % (028)         sw $3, 4($1) %
  B : 00021a02; % (02c)         srl $3, $2, 8 %
  C : 3063000f; % (030)         andi $3, $3, 0xf %
  D : ac230008; % (034)         sw $3, 8($1) %
  E : 00021b02; % (038)         srl $3, $2, 12 %
  F : 3063000f; % (03c)         andi $3, $3, 0xf %
 10 : ac23000c; % (040)         sw $3, 12($1) %
 11 : 8c890000; % (044)         lw $9, 0($4)                      # check sw %
 12 : 01244022; % (048)         sub $8, $9, $4                    # sub: $8 <- $9 - $4 %
 13 : 20050003; % (04c)         addi $5, $0, 3                    # counter %
 14 : 20a5ffff; % (050) loop2:  addi $5, $5, -1                   # counter - 1 %
 15 : 34a8ffff; % (054)         ori $8, $5, 0xffff                # zero-extend: 0000ffff %
 16 : 39085555; % (058)         xori $8, $8, 0x5555               # zero-extend: 0000aaaa %
 17 : 2009ffff; % (05c)         addi $9, $0, -1                   # sign-extend: ffffffff %
 18 : 312affff; % (060)         andi $10, $9, 0xffff              # zero-extend: 0000ffff %
 19 : 01493025; % (064)         or $6, $10, $9                    # or: ffffffff %
 1A : 01494026; % (068)         xor $8, $10, $9                   # xor: ffff0000 %
 1B : 01463824; % (06c)         and $7, $10, $6                   # and: 0000ffff %
 1C : 10a00003; % (070)         beq $5, $0, shift                 # if $5 = 0, goto shift %
 1D : 00000000; % (074)  %
 1E : 08000014; % (078)         j loop2                           # jump loop2 %
 1F : 00000000; % (07c)  %
 20 : 2005ffff; % (080) shift:  addi $5, $0, -1                   # $5 = ffffffff %
 21 : 000543c0; % (084)         sll $8, $5, 15                    # <<15 = ffff8000 %
 22 : 00084400; % (088)         sll $8, $8, 16                    # <<16 = 80000000 %
 23 : 00084403; % (08c)         sra $8, $8, 16                    # >>16 = ffff8000 (arith) %
 24 : 000843c2; % (090)         srl $8, $8, 15                    # >>15 = 0001ffff (logic) %
 25 : 08000025; % (094) finish: j finish                          # dead loop %
 26 : 00000000; % (098)  %
 27 : 00004020; % (09c) sum:    add $8, $0, $0                    # sum %
 28 : 8c890000; % (0a0) loop:   lw $9, 0($4)                      # load data %
 29 : 20840004; % (0a4)         addi $4, $4, 4                    # address + 4 %
 2A : 01094020; % (0a8)         add $8, $8, $9                    # sum %
 2B : 20a5ffff; % (0ac)         addi $5, $5, -1                   # counter - 1 %
 2C : 14a0fffb; % (0b0)         bne $5, $0, loop                  # finish? %
 2D : 00000000; % (0b4)  %
 2E : 00081000; % (0b8)         sll $2, $8, 0                     # move result to $v0 %
 2F : 03e00008; % (0bc)         jr $ra                            # return %
 30 : 00000000; % (0c0)  %
END;
